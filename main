import 'package:flutter/material.dart';
import 'abgame.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "ab game",
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.deepPurple,
      ),
      home: const MyHomePage(title: 'ab game'),
    );
  }
}  //會改變的如顏色、加法器

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();  //stateful透過createstate產生東西
}//不改變的如固定文字

class _MyHomePageState extends State<MyHomePage> {
  String s = ABGame3().get_answer();
  TextEditingController controller = TextEditingController();

  String display = '請輸入想猜的數';
  String ans = '????????';
  int counter = ABGame3().maxtime;

  @override
  void activate() {
    // TODO: implement activate
    super.activate();
  }

  void tester(){
    if (controller.text != null){
      if (counter > 0){
        setState(() {
          display = ABGame3().playGame(controller.text, s);
          counter--;
        });
      }
      else {
        setState(() {
          display = 'you fail!';
        });
      }
    }
    controller.text = '';
  }

  void answer(){
    setState(() {
      ans = s;
    });
  }

  void replay (){
    setState(() {
      s = ABGame3().get_answer();
      display = '已重開新局';
      counter = ABGame3().maxtime;
      ans = '????????';
    });
  }

  @override
  bool operator ==(Object other) {
    // TODO: implement ==
    return super == other;
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Invoke "debug painting" (press "p" in the console, choose the
          // "Toggle Debug Paint" action from the Flutter Inspector in Android
          // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
          // to see the wireframe for each widget.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              '$display ',
              style: Theme.of(context).textTheme.headlineLarge,
            ),
            Text(
              '你剩下$counter次機會',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            Text(
              '答案是 $ans',
              style: Theme.of(context).textTheme.displayMedium,
            ),
            TextField(  //存user的輸入
              controller:  controller,
              decoration:const InputDecoration(),
              style: Theme.of(context).textTheme.headlineLarge,
              textAlign: TextAlign.center ,
            ),
            Text(
              '規則：玩家猜電腦隨機生成的四位數，A代表數字與位置正確，Ｂ代表數字正確但位置錯誤',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: tester,
        tooltip: '猜！',
        child: const Icon(Icons.keyboard_capslock),
      ),
      persistentFooterButtons: [
        TextButton.icon(
          onPressed:replay,
          label: Text("再玩一次"),
          icon: Icon(Icons.ac_unit),
        ),
        TextButton.icon(
          onPressed:answer,
          label: Text("看答案"),
          icon: Icon(Icons.back_hand),
        ),
      ],
    );
  }
}
